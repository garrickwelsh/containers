name: Build and Push Devcontainer Images
on:
  workflow_dispatch:
  schedule:
    - cron: '40 16 1 * *'  # 16:40 UTC everyday
  merge_group:
  # pull_request:
  #   branches:
  #     - main
  #     - devel
  #     - testing
  #   paths-ignore:
  #     - '**.md'
  push:
    branches:
      - main
      - devel
      # - testing
    paths-ignore:
      - '**.md'
env:
    IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
    IMAGE_NAME: devcontainer

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-container:
    name: build
    runs-on: ubuntu-latest
    continue-on-error: false
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false

    steps:
      - name: set TIMESTAMP
        run: echo "TIMESTAMP=$(date +'%Y%m%d.%H.%M.%S')" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Devcontainer Image
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ env.IMAGE_REGISTRY }}/rust-${{ env.IMAGE_NAME }}
          imageTag: latest,${{ env.TIMESTAMP }}
          subFolder: "rust"
          cacheFrom: ${{ env.IMAGE_REGISTRY }}/rust-${{ env.IMAGE_NAME }}
          push: always

      # Build image using Buildah action
      # - name: Build Image
      #   id: build_image
      #   uses: redhat-actions/buildah-build@v2
      #   with:
      #     containerfiles: |
      #       ./LanguageToolContainerfile
      #     image: ${{ env.IMAGE_NAME }}
      #     tags: |
      #       ${{ steps.generate-tags.outputs.alias_tags }}
      #     build-args: |
      #       IMAGE_NAME=${{ env.IMAGE_NAME }}
      #       IMAGE_VENDOR=${{ github.repository_owner }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     oci: false

  check:
    name: Check all builds successful
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [build-container]
    steps:
      - name: Exit on failure
        if: ${{ needs.build_container.result == 'failure' }}
        shell: bash
        run: exit 1
      - name: Exit
        shell: bash
        run: exit 0
